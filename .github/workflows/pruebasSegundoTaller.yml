name: Wikipedia Pipeline

on:
  workflow_dispatch:
    inputs:
      month:
        description: 'Mes (formato MM)'
        required: true
        default: '01'
      day:
        description: 'Día (formato DD)'
        required: true
        default: '01'

jobs:
  call-api:
    runs-on: ubuntu-latest
    outputs:
      events: ${{ steps.parse.outputs.events }}
    steps:
      - name: Cache JSON file
        id: cache-json
        uses: actions/cache@v4
        with:
          path: response.json
          key: ${{ runner.os }}-json-${{ hashFiles('response.json') }}
          restore-keys: |
            ${{ runner.os }}-json-

      - name: Llamar API OnThisDay
        if: steps.cache-json.outputs.cache-hit != 'true'
        id: get-events
        run: |
          echo "Consultando API de Wikimedia..."
          curl --location --request GET "https://api.wikimedia.org/feed/v1/wikipedia/es/onthisday/all/${{ github.event.inputs.month }}/${{ github.event.inputs.day }}" > response.json
          echo "respuesta del API:"
          cat response.json | jq .

      - name: Check Cache Status
        id: check-cache
        run: |
          if [ "${{ steps.cache-json.outputs.cache-hit }}" == "true" ]; then
            echo "Se utilizó caché en esta ejecución."
          else
            echo "No se utilizó caché en esta ejecución."
          fi
      - name: Parsear eventos y generar array JSON
        id: parse
        run: |
          urls=$(jq -r '.selected[].pages[0].content_urls.desktop.page' response.json | jq -R -s -c 'split("\n")[:-1]')
          if [ "$urls" = "[]" ]; then
            echo "No se encontraron eventos."
            echo "has_events=false" >> $GITHUB_OUTPUT
          else
            echo "Eventos encontrados: $urls"
            echo "events=$urls" >> $GITHUB_OUTPUT
            echo "has_events=true" >> $GITHUB_OUTPUT
          fi

  generate-pdfs:
    needs: call-api
    if: needs.call-api.outputs.has-events == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        event: ${{ fromJson(needs.call-api.outputs.events) }}
    continue-on-error: true 
    steps:
      - name: Preparar nombre de artefacto
        id: name
        run: |
          title=$(basename "${{ matrix.url }}")
          safe_title=$(echo "$title" | sed 's/[^a-zA-Z0-9_-]/_/g')
          echo "filename=${{ github.event.inputs.month }}-${{ github.event.inputs.day }}-$safe_title.pdf" >> $GITHUB_ENV

      - name: Convertir URL a PDF
        uses: fifsky/html-to-pdf-action@v0.1
        with:
          html: ${{ matrix.url }}
          output: ${{ env.filename }}

      - name: Upload PDF Artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.filename }}
          path: ${{ env.filename }}.pdf
          retention-days: 1
      
      